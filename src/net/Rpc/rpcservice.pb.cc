// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcservice.proto

#include "rpcservice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace afa {
PROTOBUF_CONSTEXPR ProtoRequest::ProtoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProtoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoRequestDefaultTypeInternal() {}
  union {
    ProtoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoRequestDefaultTypeInternal _ProtoRequest_default_instance_;
PROTOBUF_CONSTEXPR ProtoResponse::ProtoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ProtoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProtoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProtoResponseDefaultTypeInternal() {}
  union {
    ProtoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProtoResponseDefaultTypeInternal _ProtoResponse_default_instance_;
}  // namespace afa
static ::_pb::Metadata file_level_metadata_rpcservice_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_rpcservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_rpcservice_2eproto = nullptr;

const uint32_t TableStruct_rpcservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::afa::ProtoRequest, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::afa::ProtoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afa::ProtoRequest, _impl_.message_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::afa::ProtoResponse, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::afa::ProtoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::afa::ProtoResponse, _impl_.message_name_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::afa::ProtoRequest)},
  { 8, 15, -1, sizeof(::afa::ProtoResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::afa::_ProtoRequest_default_instance_._instance,
  &::afa::_ProtoResponse_default_instance_._instance,
};

const char descriptor_table_protodef_rpcservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020rpcservice.proto\022\003afa\"$\n\014ProtoRequest\022"
  "\024\n\014message_name\030\001 \002(\t\"%\n\rProtoResponse\022\024"
  "\n\014message_name\030\001 \002(\t2A\n\nRpcService\0223\n\nGe"
  "tService\022\021.afa.ProtoRequest\032\022.afa.ProtoR"
  "esponse"
  ;
static ::_pbi::once_flag descriptor_table_rpcservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_rpcservice_2eproto = {
    false, false, 167, descriptor_table_protodef_rpcservice_2eproto,
    "rpcservice.proto",
    &descriptor_table_rpcservice_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_rpcservice_2eproto::offsets,
    file_level_metadata_rpcservice_2eproto, file_level_enum_descriptors_rpcservice_2eproto,
    file_level_service_descriptors_rpcservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_rpcservice_2eproto_getter() {
  return &descriptor_table_rpcservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_rpcservice_2eproto(&descriptor_table_rpcservice_2eproto);
namespace afa {

// ===================================================================

class ProtoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoRequest>()._impl_._has_bits_);
  static void set_has_message_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProtoRequest::ProtoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afa.ProtoRequest)
}
ProtoRequest::ProtoRequest(const ProtoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_name()) {
    _impl_.message_name_.Set(from._internal_message_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afa.ProtoRequest)
}

inline void ProtoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_){}
  };
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoRequest::~ProtoRequest() {
  // @@protoc_insertion_point(destructor:afa.ProtoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_name_.Destroy();
}

void ProtoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:afa.ProtoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string message_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "afa.ProtoRequest.message_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afa.ProtoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string message_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_name().data(), static_cast<int>(this->_internal_message_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "afa.ProtoRequest.message_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afa.ProtoRequest)
  return target;
}

size_t ProtoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afa.ProtoRequest)
  size_t total_size = 0;

  // required string message_name = 1;
  if (_internal_has_message_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoRequest::GetClassData() const { return &_class_data_; }

void ProtoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoRequest *>(to)->MergeFrom(
      static_cast<const ProtoRequest &>(from));
}


void ProtoRequest::MergeFrom(const ProtoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afa.ProtoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_name()) {
    _internal_set_message_name(from._internal_message_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoRequest::CopyFrom(const ProtoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afa.ProtoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ProtoRequest::InternalSwap(ProtoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_name_, lhs_arena,
      &other->_impl_.message_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[0]);
}

// ===================================================================

class ProtoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ProtoResponse>()._impl_._has_bits_);
  static void set_has_message_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProtoResponse::ProtoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:afa.ProtoResponse)
}
ProtoResponse::ProtoResponse(const ProtoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message_name()) {
    _impl_.message_name_.Set(from._internal_message_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:afa.ProtoResponse)
}

inline void ProtoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_name_){}
  };
  _impl_.message_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProtoResponse::~ProtoResponse() {
  // @@protoc_insertion_point(destructor:afa.ProtoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProtoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_name_.Destroy();
}

void ProtoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProtoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:afa.ProtoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string message_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "afa.ProtoResponse.message_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:afa.ProtoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string message_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_name().data(), static_cast<int>(this->_internal_message_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "afa.ProtoResponse.message_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:afa.ProtoResponse)
  return target;
}

size_t ProtoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:afa.ProtoResponse)
  size_t total_size = 0;

  // required string message_name = 1;
  if (_internal_has_message_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProtoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtoResponse::GetClassData() const { return &_class_data_; }

void ProtoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtoResponse *>(to)->MergeFrom(
      static_cast<const ProtoResponse &>(from));
}


void ProtoResponse::MergeFrom(const ProtoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:afa.ProtoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message_name()) {
    _internal_set_message_name(from._internal_message_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtoResponse::CopyFrom(const ProtoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:afa.ProtoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtoResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ProtoResponse::InternalSwap(ProtoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_name_, lhs_arena,
      &other->_impl_.message_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_rpcservice_2eproto_getter, &descriptor_table_rpcservice_2eproto_once,
      file_level_metadata_rpcservice_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace afa
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::afa::ProtoRequest*
Arena::CreateMaybeMessage< ::afa::ProtoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afa::ProtoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::afa::ProtoResponse*
Arena::CreateMaybeMessage< ::afa::ProtoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::afa::ProtoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
